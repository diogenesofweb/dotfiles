{
  "sveltekit-load": {
    "prefix": "skLoadFunction",
    "body": [
      "/** @type {import('./\\$types').PageLoad} */",
      "export function load(${1}) {\n\t${0}\n}"
    ]
  },

  "new Set()": {
    "prefix": "newSet",
    "body": "const ${1:set} = new Set() \n\t${0}"
  },
  "new Map()": {
    "prefix": "newMap",
    "body": "const ${1:map} = new Map() \n\t${0}"
  },

  "forEach": {
    "prefix": "aForEach",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${1}\n})"
  },
  "map": {
    "prefix": "aMap",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "aReduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "aFilter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "aFind",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },

  "import module": {
    "prefix": "imp",
    "body": "import ${2:*} from '${1:module}'"
  },

  "named function": {
    "prefix": "ff",
    "body": "function ${1:name} (${2}) {\n\t${0}\n}"
  },
  "export named function": {
    "prefix": "eff",
    "body": "export function ${1:name} (${2}) {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "aff",
    "body": "async function ${1:name} (${2}) {\n\t${0}\n}"
  },
  "export async function": {
    "prefix": "eaff",
    "body": "export async function ${1:name} (${2}) {\n\t${0}\n}"
  },

  "arrow function": {
    "prefix": "fn",
    "body": "(${0}) => {\n\t${1}\n}"
  },
  "inline arrow function": {
    "prefix": "ifn",
    "body": "(${1}) => ${2}"
  },
  "async arrow function": {
    "prefix": "afn",
    "body": "async (${1}) => {\n\t${0}\n}"
  },

  "console.log": {
    "prefix": "clg",
    "body": "console.log(${0})"
  },

  "JSON.stringify()": {
    "prefix": "js",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "jp",
    "body": "JSON.parse($0)"
  },

  "ternary": {
    "prefix": "te",
    "body": "${1:cond} ? ${2:true} : ${3:false}"
  },

  "Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${1:obj})"
  },
  "Object.values": {
    "prefix": "ov",
    "body": "Object.values(${1:obj})"
  },
  "Object.entries": {
    "prefix": "oe",
    "body": "Object.entries(${1:obj})"
  },

  "return": {
    "prefix": "rr",
    "body": "return ${0}"
  },

  "For Loop": {
    "prefix": "forl",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },

  "If Statement": {
    "prefix": "ifs",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  },

  "Set Timeout Function": {
    "prefix": "sto",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "sti",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "Set Interval Function"
  },

  "const variable": {
    "prefix": "cc",
    "body": "const ${1} = ${2}",
    "description": "const variable"
  },
  "let variable": {
    "prefix": "ll",
    "body": "let ${1} = ${2}",
    "description": "let variable"
  },

  "import type": {
    "prefix": "itd",
    "body": "/** ${1|@typedef,@type|} {import(\"#typings/${2:types}\").${3:Name}} ${3:Name}*/",
    "description": "Import type"
  },
  "@type": {
    "prefix": "td",
    "body": "/** @type {${1| ,string,number,boolean,string[],number[],boolean[]|}} */",
    "description": "Add type"
  }
}
